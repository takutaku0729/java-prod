package lifegame;
import javax.swing.JButton;
import javax.swing.JPanel;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;

public class BoardView extends JPanel implements BoardListener, MouseListener, MouseMotionListener {
	BoardModel view;
	int cols,rows;
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	public BoardView(BoardModel board) {
		view = board;
		cols = view.getCols();
		rows = view.getRows();
		this.addMouseListener(this);
		this.addMouseMotionListener(this);

	}
	

	@Override
	public void paint(Graphics g) {
		super.paint(g);
		
		int xlen = this.getWidth()-2;
		int ylen = this.getHeight()-2;
		int cellsize;
		
		if((xlen/cols*rows)<ylen) {	//横いっぱい
			cellsize = xlen/cols;
			for(int i = 0; i<(cols+1); i++) {//縦線
				g.drawLine(cellsize*i+1, (ylen-cellsize*rows)/2,cellsize*i+1, cellsize*rows+(ylen-cellsize*rows)/2);
			}
			for(int i = 0; i<(rows+1); i++) { //横線
				g.drawLine(1, cellsize*i+(ylen-cellsize*rows)/2, cellsize*cols+1,cellsize*i+(ylen-cellsize*rows)/2);
			}
		}else {
			cellsize = ylen/rows; //縦いっぱい
			for(int i = 0; i<(cols+1); i++) {//縦線
				g.drawLine(cellsize*i+(xlen-cellsize*cols)/2, 1, cellsize*i+(xlen-cellsize*cols)/2, cellsize*rows+1);
			}
			for(int i = 0; i<(rows+1); i++) { //横線
				g.drawLine((xlen-cellsize*cols)/2, cellsize*i+1, cellsize*cols+(xlen-cellsize*cols)/2, cellsize*i+1);
			}
		}
		
		for(int i = 0; i < cols; i++) {
			for(int j = 0; j<rows; j++) {
				if(view.isAlive(i,j)==true) {
					if((xlen/cols*rows)<ylen) {
						g.fillRect(cellsize*i+1, (ylen-cellsize*rows)/2+cellsize*j, cellsize, cellsize);
					}
					else {
						g.fillRect(cellsize*i+(xlen-cellsize*cols)/2, cellsize*j+1, cellsize, cellsize);
					}
				}
			}
		}
	}


	@Override
	public void mouseDragged(MouseEvent e) {
		// TODO 自動生成されたメソッド・スタブ
		
	}


	@Override
	public void mouseMoved(MouseEvent e) {
		// TODO 自動生成されたメソッド・スタブ
		
	}


	@Override
	public void updated(BoardModel m) {
		// TODO 自動生成されたメソッド・スタブ
		
	}


	@Override
	public void mouseClicked(MouseEvent e) {
		// 標準エラー出力にクリックされた座標を書き出す
		System.err.println("Pressed: " + e.getX() + ", " + e.getY());
		// (1, 1) のセルの状態を反転させる
		view.changeCellState(1, 1);

		
	}


	@Override
	public void mousePressed(MouseEvent e) {
		// TODO 自動生成されたメソッド・スタブ
		
	}


	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO 自動生成されたメソッド・スタブ
		
	}


	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO 自動生成されたメソッド・スタブ
		
	}


	@Override
	public void mouseExited(MouseEvent e) {
		// TODO 自動生成されたメソッド・スタブ
		
	}
	
}
